//! SeaORM Entity. Generated by sea-orm-codegen 0.10.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "receiver")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing, skip_serializing)]
    pub id: u32,
    pub name: String,
    pub address: String,
    pub network: u32,
    pub nonce: u32,
    #[serde(skip_deserializing)]
    pub created_date: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::randomness::Entity")]
    Randomness,
}

impl Related<super::randomness::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Randomness.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
