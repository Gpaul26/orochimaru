//! SeaORM Entity. Generated by sea-orm-codegen 0.10.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "randomness")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing, skip_serializing)]
    pub id: u32,
    #[serde(skip_serializing)]
    pub keyring_id: u32,
    #[serde(skip_serializing)]
    pub receiver_id: u32,
    pub epoch: u32,
    pub alpha: String,
    pub gamma: String,
    pub c: String,
    pub s: String,
    pub y: String,
    pub witness_address: String,
    pub witness_gamma: String,
    pub witness_hash: String,
    pub inverse_z: String,
    pub signature_proof: String,
    #[serde(skip_deserializing)]
    pub created_date: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::receiver::Entity",
        from = "Column::ReceiverId",
        to = "super::receiver::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Receiver,
    #[sea_orm(
        belongs_to = "super::keyring::Entity",
        from = "Column::KeyringId",
        to = "super::keyring::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Keyring,
}

impl Related<super::receiver::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Receiver.def()
    }
}

impl Related<super::keyring::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Keyring.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
