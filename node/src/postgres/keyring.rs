//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

/// Keyring model that store cryptography key
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize)]
#[sea_orm(table_name = "keyring")]
pub struct Model {
    /// Key Id
    #[sea_orm(primary_key)]
    #[serde(skip_serializing, skip_deserializing)]
    pub id: i64,
    /// Linked username
    #[sea_orm(unique)]
    pub username: String,
    /// HMAC secret to authorize this user
    #[serde(skip_serializing)]
    pub hmac_secret: String,
    /// User public key
    #[sea_orm(unique)]
    pub public_key: String,
    /// User secret key
    #[sea_orm(unique)]
    #[serde(skip_serializing)]
    pub secret_key: String,
    /// Created date
    #[serde(skip_deserializing)]
    pub created_date: DateTime,
}

/// Data relation
#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    /// Linked to randomness table
    #[sea_orm(has_many = "super::randomness::Entity")]
    Randomness,
}

impl Related<super::randomness::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Randomness.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
