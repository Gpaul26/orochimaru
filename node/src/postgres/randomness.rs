//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

/// Randomness Table
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize)]
#[sea_orm(table_name = "randomness")]
pub struct Model {
    /// Randomness Id
    #[serde(skip_serializing, skip_deserializing)]
    #[sea_orm(primary_key)]
    pub id: i64,
    /// Linked key Id
    #[serde(skip_serializing)]
    pub keyring_id: i64,
    /// Linked receiver Id
    #[serde(skip_serializing)]
    pub receiver_id: i64,
    /// Epoch
    pub epoch: i64,
    #[sea_orm(unique)]
    /// Alpha
    pub alpha: String,
    /// Gamma
    pub gamma: String,
    /// c
    pub c: String,
    /// s
    pub s: String,
    /// Out put y
    #[sea_orm(unique)]
    pub y: String,
    /// Witness address
    pub witness_address: String,
    /// Witness gamma
    pub witness_gamma: String,
    /// Witness hash
    pub witness_hash: String,
    /// Witness inverse Z
    pub inverse_z: String,
    /// Signature proof
    #[sea_orm(unique)]
    pub signature_proof: String,
    /// Created date
    #[serde(skip_deserializing)]
    pub created_date: DateTime,
}

/// Table relationship
#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    /// Linked to keyring
    #[sea_orm(
        belongs_to = "super::keyring::Entity",
        from = "Column::KeyringId",
        to = "super::keyring::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Keyring,
    /// Linked to receiver
    #[sea_orm(
        belongs_to = "super::receiver::Entity",
        from = "Column::ReceiverId",
        to = "super::receiver::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Receiver,
}

impl Related<super::keyring::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Keyring.def()
    }
}

impl Related<super::receiver::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Receiver.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
